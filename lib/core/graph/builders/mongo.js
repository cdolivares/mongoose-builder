// Generated by CoffeeScript 1.4.0

/*
  class: MongooseBuilder

  Handles all the details of using a resource to
  build out the model dependency graph.
*/


(function() {
  var ModelInitializer, MongoInitializer, MongooseBuilder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ModelInitializer = require("./helpers/model");

  MongoInitializer = require("./helpers/mongo");

  /*
    Class: MongooseBuilder
  
    Implements the builder interface with one helper method
  */


  MongooseBuilder = (function() {
    /*
        Method: constructor
    */

    function MongooseBuilder(relations, rawSchemas, dbSettings) {
      this.registerPlugin = __bind(this.registerPlugin, this);

      this.getResult = __bind(this.getResult, this);

      this.onRelational = __bind(this.onRelational, this);

      this.postBuild = __bind(this.postBuild, this);

      this.build = __bind(this.build, this);

      this.preBuild = __bind(this.preBuild, this);
      this._relations = relations;
      this._rawSchemas = rawSchemas;
      this._dbSettings = dbSettings;
      this._plugins = {};
    }

    MongooseBuilder.prototype.preBuild = function(callback) {
      var _this = this;
      this._modelInitializer = new ModelInitializer(this._relations, this._rawSchemas, this._plugins);
      this._mongoConn = new MongoInitializer(this._dbSettings);
      return this._modelInitializer.prepSchemas(function(err) {
        return _this._mongoConn.connect(function(err) {
          return callback(err);
        });
      });
    };

    /*
        Method: build
    
        Expects preBuild() was called prior to calling this method.
    */


    MongooseBuilder.prototype.build = function(callback) {
      var _this = this;
      return this._modelInitializer.addSchemaPlugins(function(err) {
        if (_this._relationalCallback != null) {
          return _this._relationalCallback(_this._relations, _this._modelInitializer.schemas, function(err) {
            return _this._modelInitializer.createModels(_this._mongoConn.get(), function(err) {
              console.log("Created models");
              return callback(err);
            });
          });
        } else {
          return _this._modelInitializer.createModels(_this._mongoConn.get(), function(err) {
            console.log("Created models");
            return callback(err);
          });
        }
      });
    };

    MongooseBuilder.prototype.postBuild = function(callback) {
      return callback(null);
    };

    /*
        Method: onRelational
        
        Sets an optional callback with which to pass back control to the client in order
        to implement some relational operations among the various data initialization stages.
    
        Since this builder is mongo specific, then it should know what to pass back to the callback
        in order for the MongoRelational class to perform correctly.
    */


    MongooseBuilder.prototype.onRelational = function(callback) {
      return this._relationalCallback = callback;
    };

    MongooseBuilder.prototype.getResult = function() {
      return this._modelInitializer.get();
    };

    MongooseBuilder.prototype.registerPlugin = function(name, Plugin) {
      return this._plugins[name] = Plugin;
    };

    return MongooseBuilder;

  })();

  module.exports = MongooseBuilder;

}).call(this);
